[{"D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\index.js":"1","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\App.jsx":"2","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\pages\\auth\\Login.jsx":"3","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\components\\layout\\sidebar.jsx":"4","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\pages\\dashboard\\home.jsx":"5","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\pages\\dashboard\\usuarios.jsx":"6","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\context\\useAuth.jsx":"7","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\components\\layout\\layout.jsx":"8","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\pages\\dashboard\\roles.jsx":"9","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\config\\settings.jsx":"10","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\context\\useLoading.jsx":"11","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\components\\styled\\LoaderBlock.jsx":"12","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\pages\\dashboard\\proyectos.jsx":"13","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\pages\\dashboard\\recursos.jsx":"14","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\context\\useAuth.jsx":"15","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\auth\\Login.jsx":"16","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\dashboard\\recursos.jsx":"17","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\config\\settings.jsx":"18","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\components\\layout\\sidebar.jsx":"19","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\index.js":"20","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\dashboard\\proyectos.jsx":"21","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\dashboard\\usuarios.jsx":"22","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\components\\layout\\layout.jsx":"23","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\components\\styled\\LoaderBlock.jsx":"24","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\dashboard\\documentos.jsx":"25","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\App.jsx":"26","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\components\\styled\\UserStyled.jsx":"27","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\modals\\UserModal.jsx":"28","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\context\\useLoading.jsx":"29","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\modals\\AssingResourcesUser.jsx":"30","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\dashboard\\roles.jsx":"31","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\dashboard\\home.jsx":"32"},{"size":454,"mtime":1606653031513,"results":"33","hashOfConfig":"34"},{"size":1004,"mtime":1607049740291,"results":"35","hashOfConfig":"34"},{"size":5537,"mtime":1607049811811,"results":"36","hashOfConfig":"34"},{"size":4785,"mtime":1606967569749,"results":"37","hashOfConfig":"34"},{"size":251,"mtime":1606967109077,"results":"38","hashOfConfig":"34"},{"size":8708,"mtime":1607049243204,"results":"39","hashOfConfig":"34"},{"size":91,"mtime":1606650906431,"results":"40","hashOfConfig":"34"},{"size":699,"mtime":1606966497830,"results":"41","hashOfConfig":"34"},{"size":223,"mtime":1606966980668,"results":"42","hashOfConfig":"34"},{"size":207,"mtime":1606996326298,"results":"43","hashOfConfig":"34"},{"size":92,"mtime":1606963526451,"results":"44","hashOfConfig":"34"},{"size":386,"mtime":1607049229256,"results":"45","hashOfConfig":"34"},{"size":235,"mtime":1607048435547,"results":"46","hashOfConfig":"34"},{"size":232,"mtime":1607048441139,"results":"47","hashOfConfig":"34"},{"size":91,"mtime":1607603379247,"results":"48","hashOfConfig":"49"},{"size":5970,"mtime":1607603616703,"results":"50","hashOfConfig":"49"},{"size":21930,"mtime":1608391702250,"results":"51","hashOfConfig":"49"},{"size":204,"mtime":1607603396636,"results":"52","hashOfConfig":"49"},{"size":4907,"mtime":1608204124228,"results":"53","hashOfConfig":"49"},{"size":461,"mtime":1608028020667,"results":"54","hashOfConfig":"49"},{"size":718,"mtime":1607903714148,"results":"55","hashOfConfig":"49"},{"size":27325,"mtime":1608384236623,"results":"56","hashOfConfig":"49"},{"size":699,"mtime":1606966497830,"results":"57","hashOfConfig":"49"},{"size":410,"mtime":1607809968642,"results":"58","hashOfConfig":"49"},{"size":238,"mtime":1607048423031,"results":"59","hashOfConfig":"49"},{"size":2487,"mtime":1608383465522,"results":"60","hashOfConfig":"49"},{"size":1275,"mtime":1607863443199,"results":"61","hashOfConfig":"49"},{"size":15119,"mtime":1607834387134,"results":"62","hashOfConfig":"49"},{"size":92,"mtime":1606963526451,"results":"63","hashOfConfig":"49"},{"size":1962,"mtime":1608028524538,"results":"64","hashOfConfig":"49"},{"size":20376,"mtime":1608387950425,"results":"65","hashOfConfig":"49"},{"size":251,"mtime":1606967109077,"results":"66","hashOfConfig":"49"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"ry76rw",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},"5sell4",{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"125"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"125"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\index.js",[],["150","151"],"D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\App.jsx",[],"D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\pages\\auth\\Login.jsx",["152","153","154"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FilledInput from \"@material-ui/core/FilledInput\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { navigate } from \"@reach/router\";\r\n// Images\r\nimport loginBanner from \"../../assets/image/login-banner.png\";\r\nimport { URL } from \"../../config/settings\";\r\nimport { AuthContext } from \"../../context/useAuth\";\r\nimport { LoadContext } from \"../../context/useLoading\";\r\nimport axios from \"axios\";\r\n// Components6\r\nimport { LoaderBlock } from \"../../components/styled/LoaderBlock\";\r\nimport { ToastsStore } from \"react-toasts\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    background: \"#363740\",\r\n    height: \"100vh\",\r\n    justifyContent: \"center\",\r\n    padding: \"0 5em\",\r\n  },\r\n  banner: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    height: \"100vh\",\r\n  },\r\n  image: {\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nconst Login = (props) => {\r\n  console.log(props, \"props\");\r\n  const loadingDATA = useContext(LoadContext);\r\n  const dataUSER = useContext(AuthContext);\r\n  const [values, setValues] = useState({\r\n    password: \"\",\r\n    username: \"\",\r\n  });\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  // const handleClickShowPassword = () => {\r\n  //   setValues({ ...values, showPassword: !values.showPassword });\r\n  // };\r\n  const [blockLoader, setBlockLoader] = useState(false);\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  const classes = useStyles();\r\n  const [showIcon, setShowIcon] = useState(false);\r\n  // Handless\r\n  useEffect(() => {\r\n    const CURRENT_USER = localStorage.getItem(\"token\");\r\n    if (CURRENT_USER) {\r\n      navigate(\"/home\");\r\n    } else {\r\n      navigate(\"/\");\r\n    }\r\n  }, []);\r\n  const handleLogin = () => {\r\n    setBlockLoader(true);\r\n    axios\r\n      .post(`${URL}login`, values)\r\n      .then((dataRESPONSE) => {\r\n        const { token, user } = dataRESPONSE.data;\r\n        localStorage.setItem(\"token\", token);\r\n        localStorage.setItem(\"user\", user.username);\r\n        setBlockLoader(false);\r\n        ToastsStore.success(dataRESPONSE.data.mensaje);\r\n        navigate(\"/home\");\r\n      })\r\n      .catch((error) => {\r\n        setBlockLoader(false);\r\n        console.log(error);\r\n        ToastsStore.error(\r\n          \"Error de autenticación: username o password incorrecto!\"\r\n        );\r\n      });\r\n  };\r\n  const handleChangeType = () => {\r\n    const ELEMENT_TYPE_CHANGE = document.getElementById(\"filled-user-password\");\r\n    if (ELEMENT_TYPE_CHANGE.type === \"text\") {\r\n      ELEMENT_TYPE_CHANGE.type = \"password\";\r\n      setShowIcon(false);\r\n    } else {\r\n      ELEMENT_TYPE_CHANGE.type = \"text\";\r\n      setShowIcon(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {blockLoader ? <LoaderBlock /> : \"\"}\r\n      <Grid container>\r\n        <Grid item xs={7}>\r\n          <Paper className={classes.banner} variant=\"outlined\">\r\n            <img\r\n              className={classes.image}\r\n              src={loginBanner}\r\n              alt=\"Banner Login\"\r\n            />\r\n          </Paper>\r\n        </Grid>\r\n        <Grid className={classes.form} item xs={5}>\r\n          <h1 className=\"color-constrast u-margin-bottom-2\">\r\n            Bienvenido de vuelta\r\n          </h1>\r\n          <TextField\r\n            className=\"input-field-login u-margin-top-2\"\r\n            label=\"Usuario\"\r\n            id=\"filled-user-nameuser\"\r\n            placeholder=\"Ingrese nombre de usuario\"\r\n            variant=\"filled\"\r\n            onChange={handleChange(\"username\")}\r\n          />\r\n          <FormControl\r\n            variant=\"filled\"\r\n            className=\"input-field-login u-margin-top-2\"\r\n          >\r\n            <InputLabel htmlFor=\"filled-adornment-password\">\r\n              Contraseña\r\n            </InputLabel>\r\n            <FilledInput\r\n              id=\"filled-user-password\"\r\n              type=\"password\"\r\n              onChange={handleChange(\"password\")}\r\n              placeholder=\"Ingresa tu contraseña\"\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    style={{ color: \"white\" }}\r\n                    aria-label=\"toggle password visibility\"\r\n                    onClick={handleChangeType}\r\n                    edge=\"end\"\r\n                  >\r\n                    {showIcon ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n            />\r\n          </FormControl>\r\n          <Button\r\n            size=\"large\"\r\n            className=\"button-gradient-primary u-margin-top-2\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleLogin}\r\n          >\r\n            Iniciar Sesión\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\components\\layout\\sidebar.jsx",["155"],"import React, { useState, useContext } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Link } from \"@reach/router\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Notifications from \"@material-ui/icons/Notifications\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport RecentActorsIcon from \"@material-ui/icons/RecentActors\";\r\nimport SupervisorAccountIcon from \"@material-ui/icons/SupervisorAccount\";\r\nimport AllInboxIcon from \"@material-ui/icons/AllInbox\";\r\nimport FolderIcon from \"@material-ui/icons/Folder\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport { AuthContext } from \"../../context/useAuth\";\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    background: \"none\",\r\n    color: \"#424242\",\r\n    boxShadow: \"none\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  header: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  profile: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  nameProfile: {\r\n    marginLeft: \"2em\",\r\n  },\r\n  notification: {\r\n    background: \"none\",\r\n    marginLeft: \"3em\",\r\n    paddingRight: \"3em\",\r\n    border: \"none\",\r\n    borderRight: \"1px solid#363740\",\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n    background: \"#363740\",\r\n  },\r\n  itemMenu: {\r\n    textDecoration: \"none\",\r\n  },\r\n}));\r\nconst NavLink = (props) => (\r\n  <Link\r\n    {...props}\r\n    getProps={({ isCurrent }) => {\r\n      return {\r\n        className: isCurrent ? \"active-link\" : \"no-active-link\",\r\n      };\r\n    }}\r\n  />\r\n);\r\nconst SideBar = ({ title }) => {\r\n  const dataUSER = useContext(AuthContext);\r\n  const CURRENT_USER = localStorage.getItem(\"user\");\r\n  dataUSER.username = CURRENT_USER;\r\n\r\n  const [itemsMenu, setItemsMenu] = useState([\r\n    { name: \"Usuarios\", route: \"/usuarios\" },\r\n    { name: \"Roles\", route: \"/roles\" },\r\n    { name: \"Recursos\", route: \"/recursos\" },\r\n    { name: \"Proyectos\", route: \"/proyectos\" },\r\n    { name: \"Documentos\", route: \"/documentos\" },\r\n  ]);\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar className={classes.header}>\r\n          <Typography className=\"u-text-uppercase\" variant=\"h5\" noWrap>\r\n            {title}\r\n          </Typography>\r\n          <div className={classes.profile}>\r\n            <button className={classes.notification}>\r\n              <Badge color=\"primary\" variant=\"dot\">\r\n                <Notifications />\r\n              </Badge>\r\n            </button>\r\n            <Typography className={`${classes.nameProfile} u-text-capitalize`}>\r\n              {dataUSER.username}\r\n            </Typography>\r\n            <Avatar className=\"u-margin-left-1 u-text-uppercase\">\r\n              {dataUSER.username.charAt(0)}\r\n            </Avatar>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n        anchor=\"left\"\r\n      >\r\n        <Toolbar>\r\n          <Typography variant=\"h5\" noWrap>\r\n            <Link to=\"/home\">Innovative Apps</Link>\r\n          </Typography>\r\n        </Toolbar>\r\n        <List>\r\n          {itemsMenu.map((item, index) => (\r\n            <NavLink key={index} to={item.route}>\r\n              <ListItem button>\r\n                <ListItemIcon style={{ color: \"white\" }}>\r\n                  {index === 0 ? <SupervisorAccountIcon /> : \"\"}\r\n                  {index === 1 ? <RecentActorsIcon /> : \"\"}\r\n                  {index === 2 ? <AllInboxIcon /> : \"\"}\r\n                  {index === 3 ? <FolderIcon /> : \"\"}\r\n                  {index === 4 ? <DescriptionIcon /> : \"\"}\r\n                  {index === 5 ? <SupervisorAccountIcon /> : \"\"}\r\n                </ListItemIcon>\r\n                <ListItemText\r\n                  // className={classes.linkSize}\r\n                  style={{ color: \"white\" }}\r\n                  primary={item.name}\r\n                />\r\n              </ListItem>\r\n            </NavLink>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\pages\\dashboard\\home.jsx",[],"D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\pages\\dashboard\\usuarios.jsx",["156","157","158","159","160","161","162","163","164"],"D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\context\\useAuth.jsx",[],["165","166"],"D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\components\\layout\\layout.jsx",[],"D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\pages\\dashboard\\roles.jsx",[],"D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\config\\settings.jsx",[],"D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\context\\useLoading.jsx",[],"D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\components\\styled\\LoaderBlock.jsx",[],"D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\pages\\dashboard\\proyectos.jsx",[],"D:\\Nova\\n.Trabajo\\P\\project-management-system\\src\\pages\\dashboard\\recursos.jsx",[],"D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\context\\useAuth.jsx",[],["167","168"],"D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\auth\\Login.jsx",["169","170","171"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FilledInput from \"@material-ui/core/FilledInput\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { navigate } from \"@reach/router\";\r\n// Images\r\nimport loginBanner from \"../../assets/image/login-banner.png\";\r\nimport { URL, HEADER } from \"../../config/settings\";\r\nimport { AuthContext } from \"../../context/useAuth\";\r\nimport { LoadContext } from \"../../context/useLoading\";\r\nimport axios from \"axios\";\r\n// Components6\r\nimport { LoaderBlock } from \"../../components/styled/LoaderBlock\";\r\nimport { ToastsStore } from \"react-toasts\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    background: \"#363740\",\r\n    height: \"100vh\",\r\n    justifyContent: \"center\",\r\n    padding: \"0 5em\",\r\n  },\r\n  banner: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    height: \"100vh\",\r\n  },\r\n  image: {\r\n    width: \"100%\",\r\n  },\r\n  fieldWidth: {\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nconst Login = (props) => {\r\n  const loadingDATA = useContext(LoadContext);\r\n  const dataUSER = useContext(AuthContext);\r\n  const [values, setValues] = useState({\r\n    password: \"\",\r\n    username: \"\",\r\n  });\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  // const handleClickShowPassword = () => {\r\n  //   setValues({ ...values, showPassword: !values.showPassword });\r\n  // };\r\n  const [blockLoader, setBlockLoader] = useState(false);\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  const classes = useStyles();\r\n  const [showIcon, setShowIcon] = useState(false);\r\n  // Handless\r\n  useEffect(() => {\r\n    console.log(HEADER.headers.Authorization, \"HEADER\");\r\n    const CURRENT_USER = localStorage.getItem(\"token\");\r\n    if (CURRENT_USER) {\r\n      navigate(\"/home\");\r\n    } else {\r\n      navigate(\"/\");\r\n    }\r\n  }, []);\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    setBlockLoader(true);\r\n    axios\r\n      .post(`${URL}login`, values)\r\n      .then((dataRESPONSE) => {\r\n        const { token, user } = dataRESPONSE.data;\r\n        localStorage.setItem(\"token\", token);\r\n        localStorage.setItem(\"user\", user.username);\r\n        setBlockLoader(false);\r\n        HEADER.headers.Authorization = `Bearer ${token}`;\r\n        ToastsStore.success(dataRESPONSE.data.mensaje);\r\n        navigate(\"/home\");\r\n      })\r\n      .catch((error) => {\r\n        setBlockLoader(false);\r\n        console.log(error);\r\n        ToastsStore.error(\r\n          \"Error de autenticación: username o password incorrecto!\"\r\n        );\r\n      });\r\n  };\r\n  const handleChangeType = () => {\r\n    const ELEMENT_TYPE_CHANGE = document.getElementById(\"filled-user-password\");\r\n    if (ELEMENT_TYPE_CHANGE.type === \"text\") {\r\n      ELEMENT_TYPE_CHANGE.type = \"password\";\r\n      setShowIcon(false);\r\n    } else {\r\n      ELEMENT_TYPE_CHANGE.type = \"text\";\r\n      setShowIcon(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {blockLoader ? <LoaderBlock /> : \"\"}\r\n      <Grid container>\r\n        <Grid item xs={7}>\r\n          <Paper className={classes.banner} variant=\"outlined\">\r\n            <img\r\n              className={classes.image}\r\n              src={loginBanner}\r\n              alt=\"Banner Login\"\r\n            />\r\n          </Paper>\r\n        </Grid>\r\n        <Grid className={classes.form} item xs={5}>\r\n          <h1 className=\"color-constrast u-margin-bottom-2\">\r\n            Bienvenido de vuelta\r\n          </h1>\r\n\r\n          <form onSubmit={handleLogin} noValidate>\r\n            <TextField\r\n              className={`input-field-login u-margin-top-2 ${classes.fieldWidth}`}\r\n              label=\"Usuario\"\r\n              id=\"filled-user-nameuser\"\r\n              placeholder=\"Ingrese nombre de usuario\"\r\n              variant=\"filled\"\r\n              onChange={handleChange(\"username\")}\r\n            />\r\n            <FormControl\r\n              variant=\"filled\"\r\n              className={`input-field-login u-margin-top-2 ${classes.fieldWidth}`}\r\n            >\r\n              <InputLabel htmlFor=\"filled-adornment-password\">\r\n                Contraseña\r\n              </InputLabel>\r\n              <FilledInput\r\n                className={classes.fieldWidth}\r\n                id=\"filled-user-password\"\r\n                type=\"password\"\r\n                onChange={handleChange(\"password\")}\r\n                placeholder=\"Ingresa tu contraseña\"\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      style={{ color: \"white\" }}\r\n                      aria-label=\"toggle password visibility\"\r\n                      onClick={handleChangeType}\r\n                      edge=\"end\"\r\n                    >\r\n                      {showIcon ? <Visibility /> : <VisibilityOff />}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                }\r\n              />\r\n            </FormControl>\r\n            <Button\r\n              size=\"large\"\r\n              className={`button-gradient-primary u-margin-top-2 ${classes.fieldWidth}`}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Iniciar Sesión\r\n            </Button>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n",["172","173"],"D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\dashboard\\recursos.jsx",["174","175","176","177","178","179","180","181","182","183","184","185","186"],"D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\config\\settings.jsx",[],["187","188"],"D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\components\\layout\\sidebar.jsx",["189"],"import React, { useState, useContext } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Link } from \"@reach/router\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Notifications from \"@material-ui/icons/Notifications\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport RecentActorsIcon from \"@material-ui/icons/RecentActors\";\r\nimport SupervisorAccountIcon from \"@material-ui/icons/SupervisorAccount\";\r\nimport AllInboxIcon from \"@material-ui/icons/AllInbox\";\r\nimport FolderIcon from \"@material-ui/icons/Folder\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport { AuthContext } from \"../../context/useAuth\";\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    background: \"none\",\r\n    color: \"#424242\",\r\n    boxShadow: \"none\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  header: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  profile: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  nameProfile: {\r\n    marginLeft: \"2em\",\r\n  },\r\n  notification: {\r\n    background: \"none\",\r\n    marginLeft: \"3em\",\r\n    paddingRight: \"3em\",\r\n    border: \"none\",\r\n    borderRight: \"1px solid#363740\",\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n    background: \"#363740\",\r\n  },\r\n  itemMenu: {\r\n    textDecoration: \"none\",\r\n  },\r\n  marginTop: {\r\n    marginTop: \"1.4em\"\r\n  }\r\n}));\r\nconst NavLink = (props) => (\r\n  <Link\r\n    {...props}\r\n    getProps={({ isCurrent }) => {\r\n      return {\r\n        className: isCurrent ? \"active-link\" : \"no-active-link\",\r\n      };\r\n    }}\r\n  />\r\n);\r\nconst SideBar = ({ title }) => {\r\n  const dataUSER = useContext(AuthContext);\r\n  const CURRENT_USER = localStorage.getItem(\"user\");\r\n  dataUSER.username = CURRENT_USER;\r\n\r\n  const [itemsMenu, setItemsMenu] = useState([\r\n    { name: \"Usuarios\", route: \"/usuarios\" },\r\n    { name: \"Roles\", route: \"/roles\" },\r\n    { name: \"Recursos\", route: \"/recursos\" },\r\n    { name: \"Proyectos\", route: \"/proyectos\" },\r\n    { name: \"Documentos\", route: \"/documentos\" },\r\n  ]);\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar className={classes.header}>\r\n          <Typography className=\"u-text-uppercase\" variant=\"h5\" noWrap>\r\n            {title}\r\n          </Typography>\r\n          <div className={classes.profile}>\r\n            <button className={classes.notification}>\r\n              <Badge color=\"primary\" variant=\"dot\">\r\n                <Notifications />\r\n              </Badge>\r\n            </button>\r\n            <Typography className={`${classes.nameProfile} u-text-capitalize`}>\r\n              {dataUSER.username}\r\n            </Typography>\r\n            <Avatar className=\"u-margin-left-1 u-text-uppercase\">\r\n              {dataUSER.username ? dataUSER.username.charAt(0) : \"\"}\r\n            </Avatar>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n        anchor=\"left\"\r\n      >\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" noWrap>\r\n            <Link to=\"/home\" className=\"logo-text\">Innovative Apps</Link>\r\n          </Typography>\r\n        </Toolbar>\r\n        <List className={classes.marginTop}>\r\n          {itemsMenu.map((item, index) => (\r\n            <NavLink key={index} to={item.route}>\r\n              <ListItem button>\r\n                <ListItemIcon style={{ color: \"white\" }}>\r\n                  {index === 0 ? <SupervisorAccountIcon /> : \"\"}\r\n                  {index === 1 ? <RecentActorsIcon /> : \"\"}\r\n                  {index === 2 ? <AllInboxIcon /> : \"\"}\r\n                  {index === 3 ? <FolderIcon /> : \"\"}\r\n                  {index === 4 ? <DescriptionIcon /> : \"\"}\r\n                  {index === 5 ? <SupervisorAccountIcon /> : \"\"}\r\n                </ListItemIcon>\r\n                <ListItemText\r\n                  // className={classes.linkSize}\r\n                  style={{ color: \"white\" }}\r\n                  primary={item.name}\r\n                />\r\n              </ListItem>\r\n            </NavLink>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\index.js",[],"D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\dashboard\\proyectos.jsx",["190","191","192","193"],"import React from \"react\";\r\nimport Layout from \"../../components/layout/layout\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { useStyles } from \"../../components/styled/UserStyled\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nconst Proyectos = (props) => {\r\n  const { path } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Layout namePath={path}>\r\n      <Toolbar className={classes.toolbarHeader}>\r\n        <h1>Sistema de gestión de documentación de proyectos </h1>\r\n      </Toolbar>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Proyectos;\r\n",["194","195"],"D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\dashboard\\usuarios.jsx",["196","197","198","199","200","201","202","203","204","205","206","207","208"],"import React, { useEffect, useState } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n// Components for tables\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n// Components\r\nimport Layout from \"../../components/layout/layout\";\r\nimport { LoaderBlock } from \"../../components/styled/LoaderBlock\";\r\nimport { URL, HEADER } from \"../../config/settings\";\r\nimport { useStyles } from \"../../components/styled/UserStyled\";\r\nimport { ToastsStore } from \"react-toasts\";\r\n// Icons\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport axios from \"axios\";\r\nimport AssignResourcesUser from \"../modals/AssingResourcesUser\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport { Input } from \"@material-ui/core\";\r\nconst Usuarios = (props) => {\r\n  const [blockLoader, setBlockLoader] = useState(false);\r\n  const { path } = props;\r\n  /**\r\n   * Handle => Close Modal\r\n   */\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setMsgError({\r\n      email: \"\",\r\n      name: \"\",\r\n      password: \"\",\r\n      telephone: \"\",\r\n      username: \"\",\r\n      state: \"\",\r\n    });\r\n    setUser({\r\n      email: \"\",\r\n      name: \"\",\r\n      password: \"\",\r\n      telephone: \"\",\r\n      username: \"\",\r\n      state: \"\",\r\n    });\r\n  };\r\n  const [user, setUser] = useState({\r\n    email: \"\",\r\n    name: \"\",\r\n    password: \"\",\r\n    telephone: \"\",\r\n    username: \"\",\r\n    state: \"\",\r\n  });\r\n  const [msgError, setMsgError] = useState({\r\n    email: \"\",\r\n    name: \"\",\r\n    password: \"\",\r\n    telephone: \"\",\r\n    username: \"\",\r\n    state: \"\",\r\n  });\r\n  // Table content\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  // const [listState, setListState] = React.useState(\"\");\r\n  const formValidate = (msgError, ...data) => {\r\n    let valid = true;\r\n    console.log(msgError, \"msgError\");\r\n    Object.values(msgError).forEach((val) => {\r\n      val.length > 0 && (valid = false);\r\n    });\r\n    Object.values(data).forEach((val) => {\r\n      val === \"\" && (valid = false);\r\n    });\r\n    return valid;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    // setListState(e.target.value);\r\n    let errors = msgError;\r\n    switch (name) {\r\n      case \"email\":\r\n        errors.email = value === \"\" ? \"Este campo es requerido\" : \"\";\r\n        break;\r\n      case \"name\":\r\n        errors.name = value === \"\" ? \"Este campo es requerido\" : \"\";\r\n        break;\r\n      case \"password\":\r\n        errors.password = value === \"\" ? \"Este campo es requerido\" : \"\";\r\n        break;\r\n      case \"telephone\":\r\n        errors.telephone = value === \"\" ? \"Este campo es requerido\" : \"\";\r\n        break;\r\n      case \"username\":\r\n        errors.username = value === \"\" ? \"Este campo es requerido\" : \"\";\r\n        break;\r\n      case \"state\":\r\n        errors.state = value === \"\" ? \"Este campo es requerido\" : \"\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    setUser((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const columns = [\r\n    { id: \"name\", label: \"Nombre\", minWidth: 140 },\r\n    { id: \"lastName\", label: \"Apellidos\", minWidth: 140 },\r\n    {\r\n      id: \"username\",\r\n      label: \"Nombre de Usuario\",\r\n      minWidth: 140,\r\n    },\r\n    {\r\n      id: \"email\",\r\n      label: \"Correo\",\r\n      minWidth: 140,\r\n    },\r\n    {\r\n      id: \"celphone\",\r\n      label: \"Celular\",\r\n      minWidth: 140,\r\n    },\r\n    {\r\n      id: \"actions\",\r\n      label: \"Acciones\",\r\n      minWidth: 140,\r\n    },\r\n  ];\r\n  const [name, setName] = useState(\"Composed TextField\");\r\n\r\n  const [stateUser, setStateUser] = useState([]);\r\n\r\n  const handleGetUsers = () => {\r\n    setBlockLoader(true);\r\n    axios\r\n      .get(`${URL}users?state=ACTIVO`, HEADER)\r\n      .then((dataUSER) => {\r\n        const { data } = dataUSER;\r\n        setStateUser(data);\r\n        setBlockLoader(false);\r\n      })\r\n      .catch((error) => {\r\n        setBlockLoader(false);\r\n        ToastsStore.error(\"Ocurrio un error al obtener los usuarios\");\r\n      });\r\n  };\r\n  /**\r\n   * Handle ==> Delete user by id\r\n   */\r\n  const handleDeleteUser = (position) => {\r\n    setBlockLoader(true);\r\n    axios\r\n      .put(`${URL}users/delete/${position}`, {}, HEADER)\r\n      .then((response) => {\r\n        handleGetUsers();\r\n        ToastsStore.success(\"Eliminado correctamente\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error, \"eROROR AL ELIMINAR\");\r\n      });\r\n  };\r\n  const [openResource, setOpenResource] = useState(false);\r\n  const [idUser, setIdUser] = useState();\r\n  const [itemRolUser, setItemRolUser] = useState();\r\n\r\n  useEffect(() => {\r\n    handleGetUsers();\r\n  }, []);\r\n\r\n  // FOR MODAL\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [positionRow, setPositionRow] = useState();\r\n  const [typeModal, setTypeModal] = useState(\"\");\r\n  const handleOpenModal = (item, position, type) => {\r\n    if (type === \"new\") {\r\n      setOpen(true);\r\n      setTypeModal(type);\r\n    } else {\r\n      setUser(item);\r\n      setPositionRow(position);\r\n      setOpen(true);\r\n      setTypeModal(type);\r\n    }\r\n  };\r\n\r\n  const handleAddUser = (e) => {\r\n    setBlockLoader(true);\r\n    e.preventDefault();\r\n    if (\r\n      user.email === \"\" ||\r\n      user.name === \"\" ||\r\n      user.password === \"\" ||\r\n      user.telephone === \"\" ||\r\n      user.username === \"\"\r\n    ) {\r\n      ToastsStore.error(\"Completa el formulario\");\r\n    } else {\r\n      if (formValidate(msgError, user)) {\r\n        axios\r\n          .post(`${URL}users`, user, HEADER)\r\n          .then((response) => {\r\n            handleClose();\r\n            handleGetUsers();\r\n            ToastsStore.success(\"Usuario agregado correctamente\");\r\n            setBlockLoader(false);\r\n          })\r\n          .catch((response) => {\r\n            setBlockLoader(false);\r\n          });\r\n      } else {\r\n        setBlockLoader(false);\r\n        ToastsStore.error(\"Completa los campos requeridos\");\r\n      }\r\n    }\r\n  };\r\n  const handleEditUser = (e) => {\r\n    setBlockLoader(true);\r\n    e.preventDefault();\r\n    if (\r\n      user.email === \"\" ||\r\n      user.name === \"\" ||\r\n      user.password === \"\" ||\r\n      user.telephone === \"\" ||\r\n      user.username === \"\"\r\n    ) {\r\n      ToastsStore.error(\"Completa el formulario\");\r\n    } else {\r\n      if (formValidate(msgError, user)) {\r\n        axios\r\n          .put(\r\n            `${URL}users/${positionRow}`,\r\n            {\r\n              email: user.email,\r\n              name: user.name,\r\n              state: user.state,\r\n              telephone: user.telephone,\r\n            },\r\n            HEADER\r\n          )\r\n          .then((response) => {\r\n            handleClose();\r\n            handleGetUsers();\r\n            ToastsStore.success(\"Guardado correctamente\");\r\n            setBlockLoader(false);\r\n          })\r\n          .catch((error) => {\r\n            setBlockLoader(false);\r\n          });\r\n      } else {\r\n        setBlockLoader(false);\r\n        ToastsStore.error(\"Completa los campos requeridos\");\r\n      }\r\n    }\r\n  };\r\n  // For ASIGNAMET ROLES TO USER\r\n  const [checked, setChecked] = useState(false);\r\n  const [stateRole, setStateRole] = useState([]);  \r\n  const handleGetRole = () => {\r\n    axios\r\n      .get(`${URL}roles?state=ACTIVO`, HEADER)\r\n      .then((dataROLES) => {\r\n        const { data } = dataROLES;\r\n        setStateRole(data);\r\n      })\r\n      .catch((error) => {\r\n        ToastsStore.error(\"Ocurrio un error al obtener los usuarios\");\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    handleGetRole();\r\n  }, []);\r\n  const handleCloseModalAsignRol = () => {\r\n    setOpenResource(false);\r\n  };\r\n  const [idRolUser, setIdRolUser] = useState([]);\r\n  const handleAssingResources = (itemRol, position) => {\r\n    setIdUser(position);\r\n    setOpenResource(true);\r\n    // handleChangeCheck(itemRol, position);\r\n    for (let i = 0; i < stateRole.length; i++) {\r\n      stateRole[i].checked = false;\r\n      for (let j = 0; j < itemRol.length; j++) {\r\n        if (stateRole[i].id === itemRol[j]) {\r\n          stateRole[i].checked = true;\r\n        }\r\n      }\r\n    }\r\n    setIdRolUser(itemRol);\r\n  };\r\n  const handleChangeCheck = (resource) => {\r\n    const sameId = idRolUser.filter((item) => item === resource)[0];\r\n    if (resource === sameId) {\r\n      const tempRolUser = idRolUser.filter((same) => same !== resource);\r\n      setIdRolUser(tempRolUser);\r\n    } else {\r\n      idRolUser.push(resource);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle to assign role to user\r\n   */\r\n  const handleAssignUserRol = () => {\r\n    setBlockLoader(true);\r\n    axios\r\n      .put(`${URL}users/${idUser}/roles`, idRolUser, HEADER)\r\n      .then(() => {\r\n        handleCloseModalAsignRol();\r\n        handleGetUsers();\r\n        ToastsStore.success(\"Guardado correctamente\");\r\n        setBlockLoader(false);\r\n      })\r\n      .catch(() => {\r\n        setBlockLoader(false);\r\n        ToastsStore.error(\"Error al asignar el rol\");\r\n      });\r\n  };\r\n  useEffect(() => {}, []);\r\n  return (\r\n    <>\r\n      <Layout namePath={path}>\r\n        <Toolbar className={classes.toolbarHeader}>\r\n          <Button\r\n            onClick={() => handleOpenModal(null, null, \"new\")}\r\n            variant=\"contained\"\r\n            className={`${classes.buttonAdd} button-gradient-primary`}\r\n            startIcon={<AddIcon />}\r\n          >\r\n            Adicionar Nuevo\r\n          </Button>\r\n          <Select labelId=\"label\" id=\"select\" value=\"20\">\r\n            <MenuItem value=\"10\">Ten</MenuItem>\r\n            <MenuItem value=\"20\">Twenty</MenuItem>\r\n          </Select>\r\n        </Toolbar>\r\n        {blockLoader ? <LoaderBlock /> : \"\"}\r\n\r\n        <div>\r\n          <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n              <Table stickyHeader size=\"small\" aria-label=\"sticky dense table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        style={{ minWidth: column.minWidth }}\r\n                      >\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {stateUser.map((item, i) => (\r\n                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={i}>\r\n                      <TableCell>{item.name}</TableCell>\r\n                      <TableCell>{item.name}</TableCell>\r\n                      <TableCell>{item.name}</TableCell>\r\n                      <TableCell>{item.email}</TableCell>\r\n                      <TableCell>{item.telephone}</TableCell>\r\n                      <TableCell>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() =>\r\n                            handleAssingResources(item.rolesIds, item.id)\r\n                          }\r\n                        >\r\n                          <MoreHorizIcon color=\"primary\" />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => handleOpenModal(item, item.id, \"edit\")}\r\n                        >\r\n                          <EditIcon color=\"primary\" />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => handleDeleteUser(item.id)}\r\n                        >\r\n                          <DeleteIcon color=\"primary\" />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            {/* <TablePagination\r\n            rowsPerPageOptions={[10, 25, 100]}\r\n            component=\"div\"\r\n            count={stateUser.data.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n          /> */}\r\n          </Paper>\r\n        </div>\r\n      </Layout>\r\n      <Modal\r\n        aria-labelledby=\"spring-modal-title\"\r\n        aria-describedby=\"spring-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 200,\r\n        }}\r\n      >\r\n        <>\r\n          <div className={classes.paper}>\r\n            <h2 className={classes.modalHeader}>NUEVO USUARIO</h2>\r\n            <div className={classes.modalBody}>\r\n              {typeModal === \"new\" ? (\r\n                <form\r\n                  className={classes.root}\r\n                  noValidate\r\n                  autoComplete=\"off\"\r\n                  onSubmit={handleAddUser}\r\n                >\r\n                  <Grid container>\r\n                    <Grid item xs={6}>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          size=\"small\"\r\n                          label=\"Nombre\"\r\n                          name=\"name\"\r\n                          onKeyUp={handleChange}\r\n                          onBlur={handleChange}\r\n                          variant=\"outlined\"\r\n                          className={msgError.name ? \"border-error\" : \"\"}\r\n                        />\r\n                        {msgError.name && (\r\n                          <FormHelperText error>\r\n                            Nombre es requerido\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          size=\"small\"\r\n                          label=\"Apellidos\"\r\n                          variant=\"outlined\"\r\n                          onKeyUp={handleChange}\r\n                          onBlur={handleChange}\r\n                        />\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          size=\"small\"\r\n                          label=\"Username\"\r\n                          name=\"username\"\r\n                          variant=\"outlined\"\r\n                          onKeyUp={handleChange}\r\n                          onBlur={handleChange}\r\n                          className={msgError.username ? \"border-error\" : \"\"}\r\n                        />\r\n                        {msgError.username && (\r\n                          <FormHelperText error>\r\n                            Nombre de usuario es requerido\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          size=\"small\"\r\n                          label=\"Correo\"\r\n                          variant=\"outlined\"\r\n                          name=\"email\"\r\n                          onKeyUp={handleChange}\r\n                          onBlur={handleChange}\r\n                          className={msgError.email ? \"border-error\" : \"\"}\r\n                        />\r\n                        {msgError.email && (\r\n                          <FormHelperText error>\r\n                            Email es requerido\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          size=\"small\"\r\n                          label=\"Contraseña\"\r\n                          variant=\"outlined\"\r\n                          type=\"password\"\r\n                          name=\"password\"\r\n                          onKeyUp={handleChange}\r\n                          onBlur={handleChange}\r\n                          className={msgError.password ? \"border-error\" : \"\"}\r\n                        />\r\n                        {msgError.password && (\r\n                          <FormHelperText error>\r\n                            Contraseña es requerido\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          size=\"small\"\r\n                          label=\"Celular\"\r\n                          variant=\"outlined\"\r\n                          name=\"telephone\"\r\n                          onKeyUp={handleChange}\r\n                          onBlur={handleChange}\r\n                          className={msgError.telephone ? \"border-error\" : \"\"}\r\n                        />\r\n                        {msgError.telephone && (\r\n                          <FormHelperText error>\r\n                            Contraseña es requerido\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} className={classes.alignCenter}>\r\n                      <Button\r\n                        // size=\"small\"\r\n                        className={`${classes.margin} button-gradient-danger u-margin-top-2`}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleClose}\r\n                        startIcon={<CloseIcon />}\r\n                      >\r\n                        Cancelar\r\n                      </Button>\r\n                      <Button\r\n                        // size=\"small\"\r\n                        className={`${classes.margin} button-gradient-primary u-margin-top-2`}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        startIcon={<SaveIcon />}\r\n                      >\r\n                        Guardar\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </form>\r\n              ) : (\r\n                <form\r\n                  className={classes.root}\r\n                  noValidate\r\n                  autoComplete=\"off\"\r\n                  onSubmit={handleEditUser}\r\n                >\r\n                  <Grid container>\r\n                    <Grid item xs={6}>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          size=\"small\"\r\n                          label=\"Nombre\"\r\n                          name=\"name\"\r\n                          onKeyUp={handleChange}\r\n                          onBlur={handleChange}\r\n                          variant=\"outlined\"\r\n                          defaultValue={user && user.name}\r\n                        />\r\n                        {msgError.name && (\r\n                          <FormHelperText error>\r\n                            Nombre es requerido\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          size=\"small\"\r\n                          label=\"Correo\"\r\n                          variant=\"outlined\"\r\n                          name=\"email\"\r\n                          onKeyUp={handleChange}\r\n                          onBlur={handleChange}\r\n                          defaultValue={user && user.email}\r\n                          className={msgError.email ? \"border-error\" : \"\"}\r\n                        />\r\n                        {msgError.email && (\r\n                          <FormHelperText error>\r\n                            Email es requerido\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          size=\"small\"\r\n                          label=\"Celular\"\r\n                          variant=\"outlined\"\r\n                          name=\"telephone\"\r\n                          onKeyUp={handleChange}\r\n                          onBlur={handleChange}\r\n                          defaultValue={user && user.telephone}\r\n                          className={msgError.telephone ? \"border-error\" : \"\"}\r\n                        />\r\n                        {msgError.telephone && (\r\n                          <FormHelperText error>\r\n                            Contraseña es requerido\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormControl\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        className={`${classes.formControl} u-display-block`}\r\n                      >\r\n                        <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                          State\r\n                        </InputLabel>\r\n                        <Select\r\n                          labelId=\"demo-simple-select-outlined-label\"\r\n                          id=\"demo-simple-select-outlined\"\r\n                          defaultValue={user && user.state}\r\n                          onChange={handleChange}\r\n                          label=\"Estado\"\r\n                          name=\"state\"\r\n                          className={classes.fieldWidth}\r\n                        >\r\n                          <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                          </MenuItem>\r\n                          <MenuItem value={\"ACTIVO\"}>Activo</MenuItem>\r\n                          <MenuItem value={\"BLOQUEADO\"}>Bloqueado</MenuItem>\r\n                          <MenuItem value={\"ELIMINADO\"}>Eliminado</MenuItem>\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} className={classes.alignCenter}>\r\n                      <Button\r\n                        // size=\"small\"\r\n                        className={`${classes.margin} button-gradient-danger u-margin-top-2`}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleClose}\r\n                        startIcon={<CloseIcon />}\r\n                      >\r\n                        Cancelar\r\n                      </Button>\r\n                      <Button\r\n                        // size=\"small\"\r\n                        className={`${classes.margin} button-gradient-primary u-margin-top-2`}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        startIcon={<SaveIcon />}\r\n                      >\r\n                        Guardar Edición\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </form>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </>\r\n      </Modal>\r\n\r\n      <Modal\r\n        aria-labelledby=\"spring-modal-title\"\r\n        aria-describedby=\"spring-modal-description\"\r\n        className={classes.modal}\r\n        open={openResource}\r\n        onClose={handleCloseModalAsignRol}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 200,\r\n        }}\r\n      >\r\n        <div className={classes.paper}>\r\n          <h2 className={classes.modalHeader}>ASIGNAR RECURSOS</h2>\r\n          <div className={classes.modalBody}>\r\n            <Grid container>\r\n              {stateRole.map((resource, i) => (\r\n                <Grid item xs={6} key={i}>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        onChange={() => handleChangeCheck(resource.id)}\r\n                        defaultChecked={resource.checked}\r\n                        color=\"primary\"\r\n                        value={resource.id}\r\n                        inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n                      />\r\n                    }\r\n                    label={resource.role}\r\n                  />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.alignCenter}>\r\n              <Button\r\n                className={`${classes.margin} button-gradient-danger u-margin-top-2`}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleCloseModalAsignRol}\r\n                startIcon={<CloseIcon />}\r\n              >\r\n                Cancelar\r\n              </Button>\r\n              <Button\r\n                className={`${classes.margin} button-gradient-primary u-margin-top-2`}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                onClick={handleAssignUserRol}\r\n                startIcon={<SaveIcon />}\r\n              >\r\n                Guardar\r\n              </Button>\r\n            </Grid>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Usuarios;\r\n","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\components\\layout\\layout.jsx",[],["209","210"],"D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\components\\styled\\LoaderBlock.jsx",[],["211","212"],"D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\dashboard\\documentos.jsx",[],"D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\App.jsx",["213","214","215","216"],"import React, { useEffect, useState } from \"react\";\nimport { Router } from \"@reach/router\";\nimport { ToastsContainer, ToastsStore } from \"react-toasts\";\nimport axios from \"axios\";\n// Pages\nimport { AuthContext } from \"./context/useAuth\";\n// Pages\nimport Login from \"./pages/auth/Login\";\nimport Home from \"./pages/dashboard/home\";\nimport Usuarios from \"./pages/dashboard/usuarios\";\nimport Roles from \"./pages/dashboard/roles\";\nimport Recursos from \"./pages/dashboard/recursos\";\nimport Proyectos from \"./pages/dashboard/proyectos\";\nimport Documentos from \"./pages/dashboard/documentos\";\nimport { HEADER } from \"./config/settings\";\nimport { navigate } from \"@reach/router\";\nconst App = () => {\n  const [currentUser, setCurrentUser] = useState([]);\n\n  axios.defaults.baseURL = \"https://projectssystems.herokuapp.com/api\";\n  axios.interceptors.response.use(undefined, (error) => {\n    if (error.message === \"Network Error\" && !error.response) {\n      ToastsStore.error(\"Ocurrio un error NETWORk\");\n    }\n    const { status, data, config } = error.response;\n    if (status === 403) {\n      ToastsStore.error(\"Ocurrio un error\");\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"user\");\n      navigate(\"/\");\n    }\n    // if (status === 404) {\n    //   console.log(\"ERROR 404\");\n    // }\n    // if (\n    //   status === 400 &&\n    //   config.method === \"get\" &&\n    //   data.errors.hasOwnProperty(\"id\")\n    // ) {\n    //   console.log(\"ERROR 400\");\n    // }\n    // if (status === 500) {\n    //   console.log(\"ERROR 5000\");\n    // }\n  });\n  useEffect(() => {\n    // axios\n    //   .get(`${URL}users?state=ACTIVO`, HEADER)\n    //   .then((dataUSER) => {\n    //     const { data } = dataUSER;\n    //     setCurrentUser((prevState) => ({ ...prevState, data }));\n    //   })\n    //   .catch((error) => {\n    //   console.log(error, \"error\")\n    //     ToastsStore.error(\"Sessión expirada\");\n    //     localStorage.removeItem(\"token\");\n    //     localStorage.removeItem(\"user\");\n    //     navigate(\"/\");\n    //   });\n  }, []);\n\n  return (\n    <AuthContext.Provider value={currentUser}>\n      <ToastsContainer store={ToastsStore} />\n      <Router>\n        <Login path=\"login\" default />\n        <Home path=\"home\" />\n        <Usuarios path=\"usuarios\" />\n        <Roles path=\"roles\" />\n        <Recursos path=\"recursos\" />\n        <Proyectos path=\"proyectos\" />\n        <Documentos path=\"documentos\" />\n      </Router>\n    </AuthContext.Provider>\n  );\n};\n\nexport default App;\n","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\components\\styled\\UserStyled.jsx",[],["217","218"],"D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\modals\\UserModal.jsx",["219","220","221","222","223"],"import React, { useEffect, useState } from \"react\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useStyles } from \"../../components/styled/UserStyled\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport axios from \"axios\";\r\nimport { URL, HEADER } from \"../../config/settings\";\r\nimport { ToastsStore } from \"react-toasts\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport { LoaderBlock } from \"../../components/styled/LoaderBlock\";\r\nconst UserModal = (props) => {\r\n  const { open, positionRow, useDATA, handleGetUser } = props;\r\n  const [listState, setListState] = React.useState(\"\");\r\n  const [blockLoader, setBlockLoader] = useState(false);\r\n  // console.log(settingsModal, \"asdasdas\");\r\n  /**\r\n   * Classes => Modal Clases and components Material UI\r\n   */\r\n  const classes = useStyles();\r\n  /**\r\n   * Handle => Close Modal\r\n   */\r\n  const handleClose = () => {\r\n    setMsgError({\r\n      email: \"\",\r\n      name: \"\",\r\n      password: \"\",\r\n      telephone: \"\",\r\n      username: \"\",\r\n    });\r\n    setUser({\r\n      email: \"\",\r\n      name: \"\",\r\n      password: \"\",\r\n      telephone: \"\",\r\n      username: \"\",\r\n      state: \"ACTIVO\",\r\n    });\r\n  };\r\n  const [user, setUser] = useState({\r\n    email: \"\",\r\n    name: \"\",\r\n    password: \"\",\r\n    telephone: \"\",\r\n    username: \"\",\r\n    state: \"ACTIVO\",\r\n  });\r\n  const [msgError, setMsgError] = useState({\r\n    email: \"\",\r\n    name: \"\",\r\n    password: \"\",\r\n    telephone: \"\",\r\n    username: \"\",\r\n  });\r\n\r\n  const formValidate = (msgError, ...data) => {\r\n    let valid = true;\r\n    console.log(msgError, \"msgError\");\r\n    Object.values(msgError).forEach((val) => {\r\n      val.length > 0 && (valid = false);\r\n    });\r\n    Object.values(data).forEach((val) => {\r\n      val === \"\" && (valid = false);\r\n    });\r\n    return valid;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    let errors = msgError;\r\n    switch (name) {\r\n      case \"email\":\r\n        errors.email = value === \"\" ? \"Este campo es requerido\" : \"\";\r\n        break;\r\n      case \"name\":\r\n        errors.name = value === \"\" ? \"Este campo es requerido\" : \"\";\r\n        break;\r\n      case \"password\":\r\n        errors.password = value === \"\" ? \"Este campo es requerido\" : \"\";\r\n        break;\r\n      case \"telephone\":\r\n        errors.telephone = value === \"\" ? \"Este campo es requerido\" : \"\";\r\n        break;\r\n      case \"username\":\r\n        errors.username = value === \"\" ? \"Este campo es requerido\" : \"\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    setUser((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n  };\r\n  useEffect(() => {}, []);\r\n  const [age, setAge] = React.useState(\"\");\r\n  const handleAddUser = (e) => {\r\n    setBlockLoader(true);\r\n    e.preventDefault();\r\n    if (\r\n      user.email === \"\" ||\r\n      user.name === \"\" ||\r\n      user.password === \"\" ||\r\n      user.telephone === \"\" ||\r\n      user.username === \"\"\r\n    ) {\r\n      ToastsStore.error(\"Completa el formulario\");\r\n      setBlockLoader(false);\r\n    } else {\r\n      if (formValidate(msgError, user)) {\r\n        axios\r\n          .post(`${URL}users`, user, HEADER)\r\n          .then((response) => {\r\n            handleClose();\r\n            handleGetUser();\r\n            ToastsStore.success(\"Usuario agregado correctamente\");\r\n            setBlockLoader(false);\r\n          })\r\n          .catch((response) => {\r\n            setBlockLoader(false);\r\n            console.log(response, \"Ocurrio un errror al agregar nuevo usuario\");\r\n          });\r\n      } else {\r\n        setBlockLoader(false);\r\n        ToastsStore.error(\"Completa los campos requeridos\");\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    // const dataSETTINGS = {\r\n    //   email: settingsModal[0].email,\r\n    //   name: settingsModal[0].name,\r\n    // };\r\n  }, []);\r\n  const handleEditUser = (e) => {\r\n    console.log(user, \"user\");\r\n    e.preventDefault();\r\n    axios\r\n      .put(\r\n        `${URL}users/${positionRow}`,\r\n        {\r\n          email: user.email,\r\n          name: user.name,\r\n          state: user.state,\r\n          telephone: user.telephone,\r\n        },\r\n        HEADER\r\n      )\r\n      .then((response) => {\r\n        handleGetUser();\r\n        console.log(response, \"RESPONSE\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error, \"ERROR\");\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      {blockLoader ? <LoaderBlock /> : \"\"}\r\n      <Modal\r\n        aria-labelledby=\"spring-modal-title\"\r\n        aria-describedby=\"spring-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 200,\r\n        }}\r\n      >\r\n        <div className={classes.paper}>\r\n          <h2 className={classes.modalHeader}>NUEVO USUARIO</h2>\r\n          <div className={classes.modalBody}>\r\n            <form\r\n              className={classes.root}\r\n              noValidate\r\n              autoComplete=\"off\"\r\n              onSubmit={handleAddUser}\r\n            >\r\n              <Grid container>\r\n                <Grid item xs={6}>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      size=\"small\"\r\n                      label=\"Nombre\"\r\n                      name=\"name\"\r\n                      onKeyUp={handleChange}\r\n                      onBlur={handleChange}\r\n                      variant=\"outlined\"\r\n                      className={msgError.name ? \"border-error\" : \"\"}\r\n                    />\r\n                    {msgError.name && (\r\n                      <FormHelperText error>Nombre es requerido</FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      size=\"small\"\r\n                      label=\"Apellidos\"\r\n                      variant=\"outlined\"\r\n                      onKeyUp={handleChange}\r\n                      onBlur={handleChange}\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      size=\"small\"\r\n                      label=\"Username\"\r\n                      name=\"username\"\r\n                      variant=\"outlined\"\r\n                      onKeyUp={handleChange}\r\n                      onBlur={handleChange}\r\n                      className={msgError.username ? \"border-error\" : \"\"}\r\n                    />\r\n                    {msgError.username && (\r\n                      <FormHelperText error>\r\n                        Nombre de usuario es requerido\r\n                      </FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      size=\"small\"\r\n                      label=\"Correo\"\r\n                      variant=\"outlined\"\r\n                      name=\"email\"\r\n                      onKeyUp={handleChange}\r\n                      onBlur={handleChange}\r\n                      className={msgError.email ? \"border-error\" : \"\"}\r\n                    />\r\n                    {msgError.email && (\r\n                      <FormHelperText error>Email es requerido</FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      size=\"small\"\r\n                      label=\"Contraseña\"\r\n                      variant=\"outlined\"\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      onKeyUp={handleChange}\r\n                      onBlur={handleChange}\r\n                      className={msgError.password ? \"border-error\" : \"\"}\r\n                    />\r\n                    {msgError.password && (\r\n                      <FormHelperText error>\r\n                        Contraseña es requerido\r\n                      </FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      size=\"small\"\r\n                      label=\"Celular\"\r\n                      variant=\"outlined\"\r\n                      name=\"telephone\"\r\n                      onKeyUp={handleChange}\r\n                      onBlur={handleChange}\r\n                      className={msgError.telephone ? \"border-error\" : \"\"}\r\n                    />\r\n                    {msgError.telephone && (\r\n                      <FormHelperText error>\r\n                        Contraseña es requerido\r\n                      </FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} className={classes.alignCenter}>\r\n                  <Button\r\n                    size=\"small\"\r\n                    className={`${classes.margin} button-gradient-danger u-margin-top-2`}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleClose}\r\n                    startIcon={<CloseIcon />}\r\n                  >\r\n                    Cancelar\r\n                  </Button>\r\n                  <Button\r\n                    size=\"small\"\r\n                    className={`${classes.margin} button-gradient-primary u-margin-top-2`}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    startIcon={<SaveIcon />}\r\n                  >\r\n                    Guardar\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n\r\n            <form\r\n              className={classes.root}\r\n              noValidate\r\n              autoComplete=\"off\"\r\n              onSubmit={handleEditUser}\r\n            >\r\n              <Grid container>\r\n                <Grid item xs={6}>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      size=\"small\"\r\n                      label=\"Nombre\"\r\n                      name=\"name\"\r\n                      onKeyUp={handleChange}\r\n                      onBlur={handleChange}\r\n                      variant=\"outlined\"\r\n                      defaultValue={user && user.name}\r\n                      className={msgError.name ? \"border-error\" : \"\"}\r\n                    />\r\n                    {msgError.name && (\r\n                      <FormHelperText error>Nombre es requerido</FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      size=\"small\"\r\n                      label=\"Correo\"\r\n                      variant=\"outlined\"\r\n                      name=\"email\"\r\n                      onKeyUp={handleChange}\r\n                      onBlur={handleChange}\r\n                      defaultValue={user && user.email}\r\n                      className={msgError.email ? \"border-error\" : \"\"}\r\n                    />\r\n                    {msgError.email && (\r\n                      <FormHelperText error>Email es requerido</FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      size=\"small\"\r\n                      label=\"Celular\"\r\n                      variant=\"outlined\"\r\n                      name=\"telephone\"\r\n                      onKeyUp={handleChange}\r\n                      onBlur={handleChange}\r\n                      defaultValue={user && user.telephone}\r\n                      className={msgError.telephone ? \"border-error\" : \"\"}\r\n                    />\r\n                    {msgError.telephone && (\r\n                      <FormHelperText error>\r\n                        Contraseña es requerido\r\n                      </FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <FormControl\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    className={classes.formControl}\r\n                  >\r\n                    <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                      State\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-simple-select-outlined-label\"\r\n                      id=\"demo-simple-select-outlined\"\r\n                      defaultValue={user && user.state}\r\n                      onChange={handleChange}\r\n                      label=\"Estado\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      <MenuItem value={\"ACTIVO\"}>Activo</MenuItem>\r\n                      <MenuItem value={\"BLOQUEADO\"}>Bloqueado</MenuItem>\r\n                      <MenuItem value={\"ELIMINADO\"}>Eliminado</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} className={classes.alignCenter}>\r\n                  <Button\r\n                    size=\"small\"\r\n                    className={`${classes.margin} button-gradient-danger u-margin-top-2`}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleClose}\r\n                    startIcon={<CloseIcon />}\r\n                  >\r\n                    Cancelar\r\n                  </Button>\r\n                  <Button\r\n                    size=\"small\"\r\n                    className={`${classes.margin} button-gradient-primary u-margin-top-2`}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    startIcon={<SaveIcon />}\r\n                  >\r\n                    Guardar Edición\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserModal;\r\n",["224","225"],"D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\context\\useLoading.jsx",[],"D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\modals\\AssingResourcesUser.jsx",[],"D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\dashboard\\roles.jsx",["226","227","228","229","230","231","232","233","234","235"],"import React, { useEffect, useState } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\n// Components for tables\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n// Components\r\nimport Layout from \"../../components/layout/layout\";\r\nimport { LoaderBlock } from \"../../components/styled/LoaderBlock\";\r\nimport { URL, HEADER } from \"../../config/settings\";\r\nimport { useStyles } from \"../../components/styled/UserStyled\";\r\nimport { ToastsStore } from \"react-toasts\";\r\n// Icons\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport axios from \"axios\";\r\nimport AssignResourcesUser from \"../modals/AssingResourcesUser\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nconst Roles = (props) => {\r\n  const [blockLoader, setBlockLoader] = useState(false);\r\n  const { path } = props;\r\n  /**\r\n   * Handle => Close Modal\r\n   */\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setMsgError({\r\n      role: \"\",\r\n      state: \"\",\r\n    });\r\n    setRole({\r\n      role: \"\",\r\n      state: \"\",\r\n    });\r\n  };\r\n  const [role, setRole] = useState({\r\n    role: \"\",\r\n    state: \"ACTIVO\",\r\n  });\r\n  const [msgError, setMsgError] = useState({\r\n    role: \"\",\r\n    state: \"\",\r\n  });\r\n  // Table content\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  // const [listState, setListState] = React.useState(\"\");\r\n  const formValidate = (msgError, ...data) => {\r\n    let valid = true;\r\n    console.log(msgError, \"msgError\");\r\n    Object.values(msgError).forEach((val) => {\r\n      val.length > 0 && (valid = false);\r\n    });\r\n    Object.values(data).forEach((val) => {\r\n      val === \"\" && (valid = false);\r\n    });\r\n    return valid;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    // setListState(e.target.value);\r\n    let errors = msgError;\r\n    switch (name) {\r\n      case \"role\":\r\n        errors.role = value === \"\" ? \"Este campo es requerido\" : \"\";\r\n        break;\r\n      case \"state\":\r\n        errors.state = value === \"\" ? \"Este campo es requerido\" : \"\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    setRole((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      id: \"role\",\r\n      label: \"Role\",\r\n      minWidth: 140,\r\n    },\r\n    {\r\n      id: \"state\",\r\n      label: \"Estado\",\r\n      minWidth: 140,\r\n    },\r\n    {\r\n      id: \"actions\",\r\n      label: \"Acciones\",\r\n      minWidth: 140,\r\n    },\r\n  ];\r\n  const [name, setName] = useState(\"Composed TextField\");\r\n\r\n  const [stateRol, setStateRole] = useState([]);\r\n\r\n  const handleGetRole = () => {\r\n    setBlockLoader(true);\r\n    axios\r\n      .get(`${URL}roles?state=ACTIVO`, HEADER)\r\n      .then((dataRole) => {\r\n        const { data } = dataRole;\r\n        setStateRole(data);\r\n        setBlockLoader(false);\r\n      })\r\n      .catch((error) => {\r\n        setBlockLoader(false);\r\n        ToastsStore.error(\"Ocurrio un error al obtener los usuarios\");\r\n      });\r\n  };\r\n  /**\r\n   * Handle ==> Delete user by id\r\n   */\r\n  const handleDeleteRol = (position) => {\r\n    setBlockLoader(true);\r\n    axios\r\n      .put(`${URL}roles/delete/${position}`, {}, HEADER)\r\n      .then((response) => {\r\n        handleGetRole();\r\n        ToastsStore.success(\"Eliminado correctamente\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error, \"eROROR AL ELIMINAR\");\r\n      });\r\n  };\r\n  const [openResource, setOpenResource] = useState(false);\r\n  const [idRol, setIdRol] = useState();\r\n\r\n  useEffect(() => {\r\n    handleGetRole();\r\n  }, []);\r\n\r\n  // FOR MODAL\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [positionRow, setPositionRow] = useState();\r\n  const [typeModal, setTypeModal] = useState(\"\");\r\n  const handleOpenModal = (item, position, type) => {\r\n    if (type === \"new\") {\r\n      setOpen(true);\r\n      setTypeModal(type);\r\n    } else {\r\n      setRole(item);\r\n      setPositionRow(position);\r\n      setOpen(true);\r\n      setTypeModal(type);\r\n    }\r\n  };\r\n\r\n  const handleAddUser = (e) => {\r\n    setBlockLoader(true);\r\n    e.preventDefault();\r\n    if (role.role === \"\") {\r\n      ToastsStore.error(\"Completa el formulario\");\r\n    } else {\r\n      if (formValidate(msgError, role)) {\r\n        axios\r\n          .post(`${URL}roles`, role, HEADER)\r\n          .then((response) => {\r\n            handleClose();\r\n            handleGetRole();\r\n            ToastsStore.success(\"Rol agregado correctamente\");\r\n            setBlockLoader(false);\r\n          })\r\n          .catch((response) => {\r\n            setBlockLoader(false);\r\n          });\r\n      } else {\r\n        setBlockLoader(false);\r\n        ToastsStore.error(\"Completa los campos requeridos\");\r\n      }\r\n    }\r\n  };\r\n  const handleEditRol = (e) => {\r\n    setBlockLoader(true);\r\n    e.preventDefault();\r\n    if (role.role === \"\" || role.state === \"\") {\r\n      ToastsStore.error(\"Completa el formulario\");\r\n    } else {\r\n      if (formValidate(msgError, role)) {\r\n        axios\r\n          .put(\r\n            `${URL}roles/${positionRow}`,\r\n            {\r\n              role: role.role,\r\n              state: role.state,\r\n            },\r\n            HEADER\r\n          )\r\n          .then(() => {\r\n            handleClose();\r\n            handleGetRole();\r\n            ToastsStore.success(\"Guardado correctamente\");\r\n            setBlockLoader(false);\r\n          })\r\n          .catch(() => {\r\n            setBlockLoader(false);\r\n            ToastsStore.error(\"Ocurrio un error editar el rol\");\r\n          });\r\n      } else {\r\n        setBlockLoader(false);\r\n        ToastsStore.error(\"Completa los campos requeridos\");\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle to assign resource to rol\r\n   */\r\n  const handleCloseModalAsignResource = () => {\r\n    setOpenResource(false);\r\n  };\r\n  const [idResourceRol, setIdResourceRol] = useState([]);\r\n  const [idRolRes, setIdRolRes] = useState();\r\n  const [stateResource, setStateResource] = useState([]);\r\n\r\n  const handleGetResource = () => {\r\n    axios\r\n      .get(`${URL}resource?state=ACTIVO`, HEADER)\r\n      .then((dataRESOURCES) => {\r\n        const { data } = dataRESOURCES;\r\n        setStateResource(data);\r\n        console.log(data, \"data\");\r\n      })\r\n      .catch((error) => {\r\n        ToastsStore.error(\"Ocurrio un error al obtener los usuarios\");\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    handleGetResource();\r\n  }, []);\r\n  const handleAssingResources = (itemRol, position) => {\r\n    setIdRolRes(position);\r\n    setOpenResource(true);\r\n    for (let i = 0; i < stateResource.length; i++) {\r\n      stateResource[i].checked = false;\r\n      for (let j = 0; j < itemRol.length; j++) {\r\n        if (stateResource[i].id === itemRol[j]) {\r\n          stateResource[i].checked = true;\r\n        }\r\n      }\r\n    }\r\n    setIdResourceRol(itemRol);\r\n  };\r\n  const handleChangeCheck = (resource) => {\r\n    const sameId = idResourceRol.filter((item) => item === resource)[0];\r\n    if (resource === sameId) {\r\n      const tempRolUser = idResourceRol.filter((same) => same !== resource);\r\n      setIdResourceRol(tempRolUser);\r\n    } else {\r\n      idResourceRol.push(resource);\r\n    }\r\n  };\r\n  /**\r\n   * Handle to assign role to user\r\n   */\r\n  const handleAssignUserRol = () => {\r\n    setBlockLoader(true);\r\n    axios\r\n      .put(`${URL}roles/${idRolRes}/resources`, idResourceRol, HEADER)\r\n      .then(() => {\r\n        handleCloseModalAsignResource();\r\n        handleGetRole();\r\n        ToastsStore.success(\"Guardado correctamente\");\r\n        setBlockLoader(false);\r\n      })\r\n      .catch(() => {\r\n        setBlockLoader(false);\r\n        ToastsStore.error(\"Error al asignar el rol\");\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      <Layout namePath={path}>\r\n        <Toolbar className={classes.toolbarHeader}>\r\n          <Button\r\n            onClick={() => handleOpenModal(null, null, \"new\")}\r\n            variant=\"contained\"\r\n            className={`${classes.buttonAdd} button-gradient-primary`}\r\n            startIcon={<AddIcon />}\r\n          >\r\n            Adicionar Nuevo\r\n          </Button>\r\n          <Select labelId=\"label\" id=\"select\" value=\"20\">\r\n            <MenuItem value=\"10\">Ten</MenuItem>\r\n            <MenuItem value=\"20\">Twenty</MenuItem>\r\n          </Select>\r\n        </Toolbar>\r\n        {blockLoader ? <LoaderBlock /> : \"\"}\r\n\r\n        <div>\r\n          <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n              <Table stickyHeader size=\"small\" aria-label=\"sticky dense table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        style={{ minWidth: column.minWidth }}\r\n                      >\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {stateRol.map((item, i) => (\r\n                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={i}>\r\n                      <TableCell>{item.role}</TableCell>\r\n                      <TableCell>{item.state}</TableCell>\r\n                      <TableCell>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() =>\r\n                            handleAssingResources(item.resourcesIds, item.id)\r\n                          }\r\n                        >\r\n                          <MoreHorizIcon color=\"primary\" />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => handleOpenModal(item, item.id, \"edit\")}\r\n                        >\r\n                          <EditIcon color=\"primary\" />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => handleDeleteRol(item.id)}\r\n                        >\r\n                          <DeleteIcon color=\"primary\" />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            {/* <TablePagination\r\n            rowsPerPageOptions={[10, 25, 100]}\r\n            component=\"div\"\r\n            count={stateRol.data.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n          /> */}\r\n          </Paper>\r\n        </div>\r\n      </Layout>\r\n      <Modal\r\n        aria-labelledby=\"spring-modal-title\"\r\n        aria-describedby=\"spring-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 200,\r\n        }}\r\n      >\r\n        <>\r\n          <div className={classes.paper}>\r\n            <h2 className={classes.modalHeader}>NUEVO USUARIO</h2>\r\n            <div className={classes.modalBody}>\r\n              {typeModal === \"new\" ? (\r\n                <form\r\n                  className={classes.root}\r\n                  noValidate\r\n                  autoComplete=\"off\"\r\n                  onSubmit={handleAddUser}\r\n                >\r\n                  <Grid container>\r\n                    <Grid item xl={12}>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          size=\"small\"\r\n                          label=\"Rol\"\r\n                          name=\"role\"\r\n                          onKeyUp={handleChange}\r\n                          onBlur={handleChange}\r\n                          variant=\"outlined\"\r\n                          className={msgError.role ? \"border-error\" : \"\"}\r\n                        />\r\n                        {msgError.role && (\r\n                          <FormHelperText error>\r\n                            Nombre es requerido\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} className={classes.alignCenter}>\r\n                      <Button\r\n                        // size=\"small\"\r\n                        className={`${classes.margin} button-gradient-danger u-margin-top-2`}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleClose}\r\n                        startIcon={<CloseIcon />}\r\n                      >\r\n                        Cancelar\r\n                      </Button>\r\n                      <Button\r\n                        // size=\"small\"\r\n                        className={`${classes.margin} button-gradient-primary u-margin-top-2`}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        startIcon={<SaveIcon />}\r\n                      >\r\n                        Guardar\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </form>\r\n              ) : (\r\n                <form\r\n                  className={classes.root}\r\n                  noValidate\r\n                  autoComplete=\"off\"\r\n                  onSubmit={handleEditRol}\r\n                >\r\n                  <Grid container>\r\n                    <Grid item xs={6}>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          size=\"small\"\r\n                          label=\"Rol\"\r\n                          name=\"rol\"\r\n                          onKeyUp={handleChange}\r\n                          onBlur={handleChange}\r\n                          variant=\"outlined\"\r\n                          defaultValue={role && role.role}\r\n                        />\r\n                        {msgError.role && (\r\n                          <FormHelperText error>\r\n                            Rol es requerido\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormControl\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        className={`${classes.formControl} u-display-block`}\r\n                      >\r\n                        <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                          State\r\n                        </InputLabel>\r\n                        <Select\r\n                          labelId=\"demo-simple-select-outlined-label\"\r\n                          id=\"demo-simple-select-outlined\"\r\n                          defaultValue={role && role.state}\r\n                          onChange={handleChange}\r\n                          label=\"Estado\"\r\n                          name=\"state\"\r\n                          className={classes.fieldWidth}\r\n                        >\r\n                          <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                          </MenuItem>\r\n                          <MenuItem value={\"ACTIVO\"}>Activo</MenuItem>\r\n                          <MenuItem value={\"BLOQUEADO\"}>Bloqueado</MenuItem>\r\n                          <MenuItem value={\"ELIMINADO\"}>Eliminado</MenuItem>\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} className={classes.alignCenter}>\r\n                      <Button\r\n                        // size=\"small\"\r\n                        className={`${classes.margin} button-gradient-danger u-margin-top-2`}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleClose}\r\n                        startIcon={<CloseIcon />}\r\n                      >\r\n                        Cancelar\r\n                      </Button>\r\n                      <Button\r\n                        // size=\"small\"\r\n                        className={`${classes.margin} button-gradient-primary u-margin-top-2`}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        startIcon={<SaveIcon />}\r\n                      >\r\n                        Guardar Edición\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </form>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </>\r\n      </Modal>\r\n      <Modal\r\n        aria-labelledby=\"spring-modal-title\"\r\n        aria-describedby=\"spring-modal-description\"\r\n        className={classes.modal}\r\n        open={openResource}\r\n        onClose={handleCloseModalAsignResource}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 200,\r\n        }}\r\n      >\r\n        <div className={classes.paper}>\r\n          <h2 className={classes.modalHeader}>ASIGNAR RECURSOS</h2>\r\n          <div className={classes.modalBody}>\r\n            <Grid container>\r\n              {stateResource.map((resource, i) => (\r\n                <Grid item xs={6} key={i}>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        onChange={() => handleChangeCheck(resource.id)}\r\n                        defaultChecked={resource.checked}\r\n                        color=\"primary\"\r\n                        value={resource.id}\r\n                        inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n                      />\r\n                    }\r\n                    label={resource.resource}\r\n                  />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.alignCenter}>\r\n              <Button\r\n                className={`${classes.margin} button-gradient-danger u-margin-top-2`}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleCloseModalAsignResource}\r\n                startIcon={<CloseIcon />}\r\n              >\r\n                Cancelar\r\n              </Button>\r\n              <Button\r\n                className={`${classes.margin} button-gradient-primary u-margin-top-2`}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                onClick={handleAssignUserRol}\r\n                startIcon={<SaveIcon />}\r\n              >\r\n                Guardar\r\n              </Button>\r\n            </Grid>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Roles;\r\n","D:\\Nova\\n.Freelance\\D\\documentsproyectfront\\src\\pages\\dashboard\\home.jsx",[],{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","severity":1,"message":"241","line":46,"column":9,"nodeType":"242","messageId":"243","endLine":46,"endColumn":20},{"ruleId":"240","severity":1,"message":"244","line":47,"column":9,"nodeType":"242","messageId":"243","endLine":47,"endColumn":17},{"ruleId":"240","severity":1,"message":"245","line":61,"column":9,"nodeType":"242","messageId":"243","endLine":61,"endColumn":32},{"ruleId":"240","severity":1,"message":"246","line":78,"column":21,"nodeType":"242","messageId":"243","endLine":78,"endColumn":33},{"ruleId":"240","severity":1,"message":"247","line":3,"column":8,"nodeType":"242","messageId":"243","endLine":3,"endColumn":18},{"ruleId":"240","severity":1,"message":"248","line":8,"column":8,"nodeType":"242","messageId":"243","endLine":8,"endColumn":18},{"ruleId":"240","severity":1,"message":"249","line":17,"column":8,"nodeType":"242","messageId":"243","endLine":17,"endColumn":23},{"ruleId":"240","severity":1,"message":"250","line":27,"column":8,"nodeType":"242","messageId":"243","endLine":27,"endColumn":21},{"ruleId":"240","severity":1,"message":"251","line":30,"column":8,"nodeType":"242","messageId":"243","endLine":30,"endColumn":17},{"ruleId":"240","severity":1,"message":"252","line":87,"column":10,"nodeType":"242","messageId":"243","endLine":87,"endColumn":14},{"ruleId":"240","severity":1,"message":"253","line":88,"column":10,"nodeType":"242","messageId":"243","endLine":88,"endColumn":21},{"ruleId":"240","severity":1,"message":"254","line":90,"column":9,"nodeType":"242","messageId":"243","endLine":90,"endColumn":25},{"ruleId":"240","severity":1,"message":"255","line":94,"column":9,"nodeType":"242","messageId":"243","endLine":94,"endColumn":32},{"ruleId":"236","replacedBy":"256"},{"ruleId":"238","replacedBy":"257"},{"ruleId":"236","replacedBy":"258"},{"ruleId":"238","replacedBy":"259"},{"ruleId":"240","severity":1,"message":"241","line":48,"column":9,"nodeType":"242","messageId":"243","endLine":48,"endColumn":20},{"ruleId":"240","severity":1,"message":"244","line":49,"column":9,"nodeType":"242","messageId":"243","endLine":49,"endColumn":17},{"ruleId":"240","severity":1,"message":"245","line":63,"column":9,"nodeType":"242","messageId":"243","endLine":63,"endColumn":32},{"ruleId":"236","replacedBy":"260"},{"ruleId":"238","replacedBy":"261"},{"ruleId":"240","severity":1,"message":"249","line":15,"column":8,"nodeType":"242","messageId":"243","endLine":15,"endColumn":23},{"ruleId":"240","severity":1,"message":"262","line":31,"column":8,"nodeType":"242","messageId":"243","endLine":31,"endColumn":27},{"ruleId":"240","severity":1,"message":"250","line":32,"column":8,"nodeType":"242","messageId":"243","endLine":32,"endColumn":21},{"ruleId":"240","severity":1,"message":"252","line":77,"column":10,"nodeType":"242","messageId":"243","endLine":77,"endColumn":14},{"ruleId":"240","severity":1,"message":"253","line":78,"column":10,"nodeType":"242","messageId":"243","endLine":78,"endColumn":21},{"ruleId":"240","severity":1,"message":"254","line":80,"column":9,"nodeType":"242","messageId":"243","endLine":80,"endColumn":25},{"ruleId":"240","severity":1,"message":"255","line":84,"column":9,"nodeType":"242","messageId":"243","endLine":84,"endColumn":32},{"ruleId":"240","severity":1,"message":"263","line":156,"column":10,"nodeType":"242","messageId":"243","endLine":156,"endColumn":14},{"ruleId":"240","severity":1,"message":"264","line":156,"column":16,"nodeType":"242","messageId":"243","endLine":156,"endColumn":23},{"ruleId":"240","severity":1,"message":"265","line":189,"column":10,"nodeType":"242","messageId":"243","endLine":189,"endColumn":22},{"ruleId":"240","severity":1,"message":"266","line":189,"column":24,"nodeType":"242","messageId":"243","endLine":189,"endColumn":39},{"ruleId":"240","severity":1,"message":"267","line":190,"column":10,"nodeType":"242","messageId":"243","endLine":190,"endColumn":15},{"ruleId":"240","severity":1,"message":"268","line":190,"column":17,"nodeType":"242","messageId":"243","endLine":190,"endColumn":25},{"ruleId":"236","replacedBy":"269"},{"ruleId":"238","replacedBy":"270"},{"ruleId":"240","severity":1,"message":"246","line":81,"column":21,"nodeType":"242","messageId":"243","endLine":81,"endColumn":33},{"ruleId":"240","severity":1,"message":"271","line":4,"column":8,"nodeType":"242","messageId":"243","endLine":4,"endColumn":14},{"ruleId":"240","severity":1,"message":"272","line":5,"column":8,"nodeType":"242","messageId":"243","endLine":5,"endColumn":16},{"ruleId":"240","severity":1,"message":"273","line":6,"column":8,"nodeType":"242","messageId":"243","endLine":6,"endColumn":14},{"ruleId":"240","severity":1,"message":"274","line":8,"column":8,"nodeType":"242","messageId":"243","endLine":8,"endColumn":15},{"ruleId":"236","replacedBy":"275"},{"ruleId":"238","replacedBy":"276"},{"ruleId":"240","severity":1,"message":"249","line":17,"column":8,"nodeType":"242","messageId":"243","endLine":17,"endColumn":23},{"ruleId":"240","severity":1,"message":"262","line":33,"column":8,"nodeType":"242","messageId":"243","endLine":33,"endColumn":27},{"ruleId":"240","severity":1,"message":"277","line":40,"column":10,"nodeType":"242","messageId":"243","endLine":40,"endColumn":15},{"ruleId":"240","severity":1,"message":"252","line":83,"column":10,"nodeType":"242","messageId":"243","endLine":83,"endColumn":14},{"ruleId":"240","severity":1,"message":"253","line":84,"column":10,"nodeType":"242","messageId":"243","endLine":84,"endColumn":21},{"ruleId":"240","severity":1,"message":"254","line":86,"column":9,"nodeType":"242","messageId":"243","endLine":86,"endColumn":25},{"ruleId":"240","severity":1,"message":"255","line":90,"column":9,"nodeType":"242","messageId":"243","endLine":90,"endColumn":32},{"ruleId":"240","severity":1,"message":"263","line":165,"column":10,"nodeType":"242","messageId":"243","endLine":165,"endColumn":14},{"ruleId":"240","severity":1,"message":"264","line":165,"column":16,"nodeType":"242","messageId":"243","endLine":165,"endColumn":23},{"ruleId":"240","severity":1,"message":"278","line":200,"column":10,"nodeType":"242","messageId":"243","endLine":200,"endColumn":21},{"ruleId":"240","severity":1,"message":"279","line":200,"column":23,"nodeType":"242","messageId":"243","endLine":200,"endColumn":37},{"ruleId":"240","severity":1,"message":"280","line":293,"column":10,"nodeType":"242","messageId":"243","endLine":293,"endColumn":17},{"ruleId":"240","severity":1,"message":"281","line":293,"column":19,"nodeType":"242","messageId":"243","endLine":293,"endColumn":29},{"ruleId":"236","replacedBy":"282"},{"ruleId":"238","replacedBy":"283"},{"ruleId":"236","replacedBy":"284"},{"ruleId":"238","replacedBy":"285"},{"ruleId":"240","severity":1,"message":"286","line":15,"column":10,"nodeType":"242","messageId":"243","endLine":15,"endColumn":16},{"ruleId":"240","severity":1,"message":"287","line":18,"column":23,"nodeType":"242","messageId":"243","endLine":18,"endColumn":37},{"ruleId":"240","severity":1,"message":"288","line":25,"column":21,"nodeType":"242","messageId":"243","endLine":25,"endColumn":25},{"ruleId":"240","severity":1,"message":"289","line":25,"column":27,"nodeType":"242","messageId":"243","endLine":25,"endColumn":33},{"ruleId":"236","replacedBy":"290"},{"ruleId":"238","replacedBy":"291"},{"ruleId":"240","severity":1,"message":"292","line":20,"column":30,"nodeType":"242","messageId":"243","endLine":20,"endColumn":37},{"ruleId":"240","severity":1,"message":"293","line":21,"column":10,"nodeType":"242","messageId":"243","endLine":21,"endColumn":19},{"ruleId":"240","severity":1,"message":"294","line":21,"column":21,"nodeType":"242","messageId":"243","endLine":21,"endColumn":33},{"ruleId":"240","severity":1,"message":"295","line":104,"column":10,"nodeType":"242","messageId":"243","endLine":104,"endColumn":13},{"ruleId":"240","severity":1,"message":"296","line":104,"column":15,"nodeType":"242","messageId":"243","endLine":104,"endColumn":21},{"ruleId":"236","replacedBy":"297"},{"ruleId":"238","replacedBy":"298"},{"ruleId":"240","severity":1,"message":"249","line":15,"column":8,"nodeType":"242","messageId":"243","endLine":15,"endColumn":23},{"ruleId":"240","severity":1,"message":"262","line":33,"column":8,"nodeType":"242","messageId":"243","endLine":33,"endColumn":27},{"ruleId":"240","severity":1,"message":"252","line":66,"column":10,"nodeType":"242","messageId":"243","endLine":66,"endColumn":14},{"ruleId":"240","severity":1,"message":"253","line":67,"column":10,"nodeType":"242","messageId":"243","endLine":67,"endColumn":21},{"ruleId":"240","severity":1,"message":"254","line":69,"column":9,"nodeType":"242","messageId":"243","endLine":69,"endColumn":25},{"ruleId":"240","severity":1,"message":"255","line":73,"column":9,"nodeType":"242","messageId":"243","endLine":73,"endColumn":32},{"ruleId":"240","severity":1,"message":"263","line":129,"column":10,"nodeType":"242","messageId":"243","endLine":129,"endColumn":14},{"ruleId":"240","severity":1,"message":"264","line":129,"column":16,"nodeType":"242","messageId":"243","endLine":129,"endColumn":23},{"ruleId":"240","severity":1,"message":"267","line":163,"column":10,"nodeType":"242","messageId":"243","endLine":163,"endColumn":15},{"ruleId":"240","severity":1,"message":"268","line":163,"column":17,"nodeType":"242","messageId":"243","endLine":163,"endColumn":25},"no-native-reassign",["299"],"no-negated-in-lhs",["300"],"no-unused-vars","'loadingDATA' is assigned a value but never used.","Identifier","unusedVar","'dataUSER' is assigned a value but never used.","'handleMouseDownPassword' is assigned a value but never used.","'setItemsMenu' is assigned a value but never used.","'InputLabel' is defined but never used.","'Typography' is defined but never used.","'TablePagination' is defined but never used.","'MoreHorizIcon' is defined but never used.","'PropTypes' is defined but never used.","'page' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'handleChangePage' is assigned a value but never used.","'handleChangeRowsPerPage' is assigned a value but never used.",["299"],["300"],["299"],["300"],["299"],["300"],"'AssignResourcesUser' is defined but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'openResource' is assigned a value but never used.","'setOpenResource' is assigned a value but never used.","'idRol' is assigned a value but never used.","'setIdRol' is assigned a value but never used.",["299"],["300"],"'Button' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'AddIcon' is defined but never used.",["299"],["300"],"'Input' is defined but never used.","'itemRolUser' is assigned a value but never used.","'setItemRolUser' is assigned a value but never used.","'checked' is assigned a value but never used.","'setChecked' is assigned a value but never used.",["299"],["300"],["299"],["300"],"'HEADER' is defined but never used.","'setCurrentUser' is assigned a value but never used.","'data' is assigned a value but never used.","'config' is assigned a value but never used.",["299"],["300"],"'useDATA' is assigned a value but never used.","'listState' is assigned a value but never used.","'setListState' is assigned a value but never used.","'age' is assigned a value but never used.","'setAge' is assigned a value but never used.",["299"],["300"],"no-global-assign","no-unsafe-negation"]